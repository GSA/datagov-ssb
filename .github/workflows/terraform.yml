# On pull request events, this workflow will run `terraform init`, `terraform
# fmt`, and `terraform plan`. On push events to the main branch, `terraform
# apply` will be executed.

name: 'Terraform'

on:
  push:
    branches:
    - main
  pull_request:

env:
  # Vars for persisting the state of Terraform workspaces
  AWS_ACCESS_KEY_ID: "${{ secrets.AWS_ACCESS_KEY_ID }}"
  AWS_SECRET_ACCESS_KEY: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
  BUCKET: "${{ secrets.BUCKET }}"
  REGION: "${{ secrets.REGION }}"
  KEY: "ssb-tfstate"
  ENCRYPT: "true"

jobs:
  review-staging:
    runs-on: ubuntu-latest
    name: 'Staging validation and plan generation'

    environment: staging
    env:
      TF_WORKSPACE: staging
      TF_VAR_cf_username: ${{ secrets.TF_VAR_cf_username }}
      TF_VAR_cf_password: ${{ secrets.TF_VAR_cf_password }}
      TF_VAR_aws_access_key_id: ${{ secrets.TF_VAR_aws_access_key_id }}
      TF_VAR_aws_secret_access_key: ${{ secrets.TF_VAR_aws_secret_access_key }}
      VAR_FILE: terraform.staging.tfvars

    outputs:
      plan-stdout: ${{ steps.plan.outputs.stdout }}
      plan-outcome: ${{ steps.plan.outcome }}
      format-outcome: ${{ steps.fmt.outcome }}
      init-outcome: ${{ steps.init.outcome }}
      validate-stdout: ${{ steps.validate.outputs.stdout }}

    steps:
    - uses: actions/checkout@v2
    - name: Prepare the applications
      run: |
        ./app-setup-eks.sh
        ./app-setup-solr.sh
        ./app-setup-aws.sh
    - uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 0.14.x

    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform init
      id: init
      run: > 
        terraform init -backend-config=bucket="${{ env.BUCKET }}" 
        -backend-config=key="${{ env.KEY }}" 
        -backend-config=region="${{ env.REGION }}" 
        -backend-config=encrypt="${{ env.ENCRYPT }}"
        -backend-config=access_key="${{ env.AWS_ACCESS_KEY_ID }}"
        -backend-config=secret_key="${{ env.AWS_SECRET_ACCESS_KEY }}"

    - name: Terraform validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform plan
      id: plan
      run: terraform plan -no-color -var-file=${{ env.VAR_FILE }}
      continue-on-error: true

  review-production:
    runs-on: ubuntu-latest
    name: 'Production validation and plan generation'

    environment: production
    env:
      TF_WORKSPACE: default
      TF_VAR_cf_username: ${{ secrets.TF_VAR_cf_username }}
      TF_VAR_cf_password: ${{ secrets.TF_VAR_cf_password }}
      TF_VAR_aws_access_key_id: ${{ secrets.TF_VAR_aws_access_key_id }}
      TF_VAR_aws_secret_access_key: ${{ secrets.TF_VAR_aws_secret_access_key }}
      VAR_FILE: terraform.production.tfvars


    outputs:
      plan-stdout: ${{ steps.plan.outputs.stdout }}
      plan-outcome: ${{ steps.plan.outcome }}
      format-outcome: ${{ steps.fmt.outcome }}
      init-outcome: ${{ steps.init.outcome }}
      validate-stdout: ${{ steps.validate.outputs.stdout }}

    steps:
    - uses: actions/checkout@v2
    - name: Prepare the applications
      run: |
        ./app-setup-eks.sh
        ./app-setup-solr.sh
        ./app-setup-aws.sh
    - uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 0.14.x

    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform init
      id: init
      run: > 
        terraform init -backend-config=bucket="${{ env.BUCKET }}" 
        -backend-config=key="${{ env.KEY }}" 
        -backend-config=region="${{ env.REGION }}" 
        -backend-config=encrypt="${{ env.ENCRYPT }}"
        -backend-config=access_key="${{ env.AWS_ACCESS_KEY_ID }}"
        -backend-config=secret_key="${{ env.AWS_SECRET_ACCESS_KEY }}"

    - name: Terraform validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform plan
      id: plan
      run: terraform plan -no-color -var-file=${{ env.VAR_FILE }}
      continue-on-error: true

  post-to-pr:
    name: 'Post plans for review'
    runs-on: ubuntu-latest
    needs: 
      - review-staging
      - review-production
    steps:
    - name: Update Pull Request
      uses: actions/github-script@v3
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ needs.review-staging.outputs.format-outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ needs.review-staging.outputs.init-outcome }}\`
          #### Plan üìñ\`${{ needs.review-staging.outputs.plan-outcome }}\`
          <details><summary>Show plan</summary>

          \`\`\`terraform
          ${{ needs.review-staging.outputs.plan-stdout }}
          \`\`\`

          </details>

          #### Terraform Format and Style üñå\`${{ needs.review-production.outputs.format-outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ needs.review-production.outputs.init-outcome }}\`
          #### Plan üìñ\`${{ needs.review-production.outputs.plan-outcome }}\`
          <details><summary>Show plan</summary>

          \`\`\`terraform
          ${{ needs.review-production.outputs.plan-stdout }}
          \`\`\`

          </details>          
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          });

    - name: Terraform Plan Status
      if: needs.review-staging.outputs.plan-outcome == 'failure' || needs.review-production.outputs.plan-outcome == 'failure'
      run: exit 1


  deploy-staging:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    name: Deploy and test in staging
    needs: 
    - review-staging
    - review-production

    environment: staging
    env:
      VAR_FILE: terraform.staging.tfvars
      TF_WORKSPACE: staging
      TF_VAR_cf_username: ${{ secrets.TF_VAR_cf_username }}
      TF_VAR_cf_password: ${{ secrets.TF_VAR_cf_password }}
      TF_VAR_aws_access_key_id: ${{ secrets.TF_VAR_aws_access_key_id }}
      TF_VAR_aws_secret_access_key: ${{ secrets.TF_VAR_aws_secret_access_key }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout source
      uses: actions/checkout@v2
    - name: Prepare the application
      run: |
        ./app-setup-eks.sh
        ./app-setup-solr.sh
        ./app-setup-aws.sh
    - uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 0.14.x

    - name: Terraform init
      id: init
      run: > 
        terraform init -backend-config=bucket="${{ env.BUCKET }}" 
        -backend-config=key="${{ env.KEY }}" 
        -backend-config=region="${{ env.REGION }}" 
        -backend-config=encrypt="${{ env.ENCRYPT }}"
        -backend-config=access_key="${{ env.AWS_ACCESS_KEY_ID }}"
        -backend-config=secret_key="${{ env.AWS_SECRET_ACCESS_KEY }}"

    # Uncomment the following step to get an interactive debugging session!
    # Use the SSH key on your GitHub account to ssh to the address displayed in
    # the GitHub Action logs.
#    - name: Start debugging session
#      uses: mxschmitt/action-tmate@v3
#      with:
#        limit-access-to-actor: true

    - name: Terraform apply
      id: plan
      run: terraform apply -no-color -auto-approve -var-file=${{ env.VAR_FILE }}

    - name: Test
      run: echo ok  # TODO staging smoke test

  deploy-production:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    name: Deploy into production
    needs: deploy-staging

    environment: production
    env:
      VAR_FILE: terraform.production.tfvars
      TF_WORKSPACE: default
      TF_VAR_cf_username: ${{ secrets.TF_VAR_cf_username }}
      TF_VAR_cf_password: ${{ secrets.TF_VAR_cf_password }}
      TF_VAR_aws_access_key_id: ${{ secrets.TF_VAR_aws_access_key_id }}
      TF_VAR_aws_secret_access_key: ${{ secrets.TF_VAR_aws_secret_access_key }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout source
      uses: actions/checkout@v2
    - name: Prepare the application
      run: |
        ./app-setup-eks.sh
        ./app-setup-solr.sh
        ./app-setup-aws.sh
    - uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 0.14.x

    - name: Terraform init
      id: init
      run: > 
        terraform init -backend-config=bucket="${{ env.BUCKET }}" 
        -backend-config=key="${{ env.KEY }}" 
        -backend-config=region="${{ env.REGION }}" 
        -backend-config=encrypt="${{ env.ENCRYPT }}"
        -backend-config=access_key="${{ env.AWS_ACCESS_KEY_ID }}"
        -backend-config=secret_key="${{ env.AWS_SECRET_ACCESS_KEY }}"

    # Uncomment the following step to get an interactive debugging session!
    # Use the SSH key on your GitHub account to ssh to the address displayed in
    # the GitHub Action logs.
#    - name: Start debugging session
#      uses: mxschmitt/action-tmate@v3
#      with:
#        limit-access-to-actor: true

    - name: Terraform apply
      id: plan
      run: terraform apply -no-color -auto-approve -var-file=${{ env.VAR_FILE }}

